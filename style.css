hr {
  border-color: black;
}

body {
  background-image: url(img/daytime_cem.png);
  font-family: sans-serif;
  background-size: cover;
}

.input {
  text-align: center;
  align-items: center;
}


h1 {
  text-align: center;
}

.intro {
  text-align: center;
}

footer {
  position: absolute;
  bottom: 0;
}

#sleepButton {
  /*you're using # because youre calling the ID*/
  background-color: aqua;
}

.stats {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;
  text-align: center;
}

.grid-item {
  border: 6px solid black;
  padding: 10px;
  border-radius: 10px;
  width: 90px
}

.face {
  position: static; 
  float: right;
  margin: 20px 100px 100px 20px;
  border-radius: 100%;
  right: 5px;
  width: 545px;
  height: 474px;
  background: url(img/jack1.png);
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  animation: rotate 3s linear infinite;
}

/* position: center; - This line is invalid in CSS. The correct values for the position property are static, relative, absolute, fixed, or sticky.

// FIXED - the center property; changed to static

float: right; - This property is used to align an element to the right within its containing element.

margin: 20px 100px 100px 20px; - This sets different margin values for each side of the element in the order top, right, bottom, left.

border-radius: 100%; - This property is used to create a circular border radius for the element.

right: 5px; - This positions the element 5 pixels from the right edge of its containing element.

width: 545px; - Sets the width of the element to 545 pixels.

height: 474px; - Sets the height of the element to 474 pixels.

background: url(img/jack1.png); - This sets the background image of the element to the image located at the URL img/jack1.png.

top: 50%; - Positions the top of the element 50% down from the top of its containing element.

left: 50%; - Positions the left of the element 50% across from the left of its containing element.

transform: translate(-50%, -50%); - This moves the element 50% up and to the left from its current position using a CSS transformation.

animation: rotate 3s linear infinite; - This applies an animation named "rotate" to the element. The animation has a duration of 3 seconds, uses a linear timing function, and runs infinitely. */

@keyframes rotate {
  0% {
    transform: rotate(0);
  }

  100% {
    transform: rotate(360deg);
  }
}

/* @keyframes: It is a CSS at-rule that controls the intermediate steps in a CSS animation sequence by defining styles for keyframes at specific percentages along the animation.

rotate: This is the name given to the keyframe animation sequence.

0%: This is the starting point of the animation where the transformation specified within the block is applied when the animation is at 0%.

100%: This is the end point of the animation where the transformation specified within the block is applied when the animation is at 100%.

transform: rotate(0);: This line specifies the transformation - in this case, it rotates an element by 0 degrees when the animation is at 0%.

transform: rotate(360deg);: This line specifies the transformation - it rotates the element by 360 degrees when the animation is at 100%. */